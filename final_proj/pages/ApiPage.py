import requests
import copy
import re
from final_proj.providers.ConfigProvider import ConfigProvider
from final_proj.providers.DataProvider import DataProvider


class ApiPage:

    def __init__(self):
        self.url = ConfigProvider().get_api_url()
        self.headers = DataProvider().get_headers()
        self.params = DataProvider().get_params()
        self.body = DataProvider().get_data()

    def latin_letter(self) -> tuple:
        """
        –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü–µ
        :return: tuple
        """

        resp = requests.get(self.url, params=self.params, headers=self.headers)
        latin_name = resp.json()['included'][0]['attributes']['title']

        return resp, bool(re.search(r'[a-zA-Z]', latin_name))

    def upper_letter(self) -> tuple:
        """
        –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ —Ç–æ–ª—å–∫–æ –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
        :return: tuple
        """

        original_params = self.params

        new_params = copy.deepcopy(original_params)
        new_params["phrase"] = "–ü–†–û–ì–†–ê–ú–ú–ò–†–û–í–ê–ù–ò–ï"

        resp = requests.get(self.url, params=new_params, headers=self.headers)
        id_item = resp.json()['included'][0]['id']

        return resp, id_item

    def search_two_symbol(self) -> tuple:
        """
        –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ —Ç–æ–ª—å–∫–æ –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
        :return: tuple
        """

        original_params = self.params

        new_params = copy.deepcopy(original_params)
        new_params["phrase"] = "–Ø–Ω"

        resp = requests.get(self.url, params=new_params, headers=self.headers)

        id_item = resp.json()['included'][0]['id']

        return resp, id_item

    def wrong_text(self) -> requests.models.Response:
        """
        –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ —Å –æ—à–∏–±–∫–æ–π –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
        """

        original_params = DataProvider().get_params()

        new_params = copy.deepcopy(original_params)
        new_params["phrase"] = "–∫–æ—Ä–∞–Ω–¥–∞—à"

        resp = requests.get(self.url, params=new_params, headers=self.headers)

        return resp

    def search_for_id(self, id_product) -> tuple:
        """
        –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –ø–æ id
        :return: tuple
        """

        original_params = DataProvider().get_params()

        new_params = copy.deepcopy(original_params)
        new_params["phrase"] = f"{id_product}"

        resp = requests.get(self.url, params=new_params, headers=self.headers)

        id_item = resp.json()['included'][0]['id']

        return resp, id_item

    def cyrillic_latin_letter(self) -> tuple:
        """
        –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –∫–∏—Ä–∏–ª–ª–∏—Ü–∞ –∏ –ª–∞—Ç–∏–Ω–∏—Ü–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞
        :return: tuple
        """

        original_params = self.params

        new_params = copy.deepcopy(original_params)
        new_params["phrase"] = "love is –∂–µ–≤–∞—Ç–µ–ª—å–Ω–∞—è —Ä–µ–∑–∏–Ω–∫–∞"

        resp = requests.get(self.url, params=new_params, headers=self.headers)

        cyrillic_pattern = r'[–∞-—è–ê-–Ø—ë–Å]'
        latin_pattern = r'[a-zA-Z]'

        name = resp.json()['included'][0]['attributes']['title']

        has_cyrillic = bool(re.search(cyrillic_pattern, name))
        has_latin = bool(re.search(latin_pattern, name))

        return resp, has_latin, has_cyrillic

    def empty_token(self) -> requests.models.Response:
        """
        –ü–æ–∏—Å–∫ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞
        """

        original_headers = self.headers

        new_headers = copy.deepcopy(original_headers)
        new_headers['Authorization'] = ''

        resp = requests.get(self.url, params=self.params, headers=new_headers)

        return resp

    def invalid_token(self) -> requests.models.Response:
        """
        –ü–æ–∏—Å–∫ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
        """

        original_headers = self.headers

        new_headers = copy.deepcopy(original_headers)
        new_headers['Authorization'] = (
            'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.'
            'eyJpc3MiiOj'
        )

        resp = requests.get(self.url, params=self.params, headers=new_headers)

        return resp

    def empty_field(self) -> tuple:
        """
        –ü—É—Å—Ç–æ–µ –ø–æ–ª–µ –≤ —Å—Ç—Ä–æ–∫–µ –ø–æ–∏—Å–∫–∞
        """

        original_params = self.params

        new_params = copy.deepcopy(original_params)
        new_params["phrase"] = ""

        resp = requests.get(self.url, params=new_params, headers=self.headers)
        result = resp.json()

        return resp, result

    def send_smile(self) -> tuple:
        """
        –°–º–∞–π–ª –≤ —Å—Ç—Ä–æ–∫–µ –ø–æ–∏—Å–∫–∞
        """

        original_params = self.params

        new_params = copy.deepcopy(original_params)
        new_params["phrase"] = "üòÅüòÅüòÅ"

        resp = requests.get(self.url, params=new_params, headers=self.headers)
        result = resp.json()

        return resp, result

    def one_symbol(self) -> tuple:
        """
        –ü–æ–∏—Å–∫ —Å –æ–¥–Ω–∏–º —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ
        """

        original_params = self.params

        new_params = copy.deepcopy(original_params)
        new_params["phrase"] = "–Ø"

        resp = requests.get(self.url, params=new_params, headers=self.headers)
        result = resp.json()

        return resp, result

    def text_126_symbols(self) -> tuple:
        """
        126 —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ –ø–æ–∏—Å–∫–∞
        """

        original_params = self.params

        new_params = copy.deepcopy(original_params)
        new_params["phrase"] = (
            "Lorem ipsum dolor sits amet, consectetuer adipiscing elit. "
            "Aenean commodo ligula eget dolor. Aenean massadsads. "
            "Cum sociis natoque p"
        )

        resp = requests.get(self.url, params=new_params, headers=self.headers)
        result = resp.json()

        return resp, result

    def search_post_method(self) -> requests.models.Response:
        """
        –ü–æ–∏—Å–∫ –º–µ—Ç–æ–¥–æ–º POST
        """

        resp = requests.post(self.url, json=self.body, headers=self.headers)

        return resp
